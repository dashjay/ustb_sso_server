// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF3f28f3bDecodeUstbSsoStructs(in *jlexer.Lexer, out *Reply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msg":
			out.Msg = string(in.String())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]Grade, 0, 1)
					} else {
						out.Body = []Grade{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Grade
					(v1).UnmarshalEasyJSON(in)
					out.Body = append(out.Body, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3f28f3bEncodeUstbSsoStructs(out *jwriter.Writer, in Reply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Body {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3f28f3bEncodeUstbSsoStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3f28f3bEncodeUstbSsoStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3f28f3bDecodeUstbSsoStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3f28f3bDecodeUstbSsoStructs(l, v)
}
func easyjsonF3f28f3bDecodeUstbSsoStructs1(in *jlexer.Lexer, out *Grade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schoolYear":
			out.SchoolYear = int(in.Int())
		case "semester":
			out.Semester = int(in.Int())
		case "courseNo":
			out.CourseNo = string(in.String())
		case "courseName":
			out.CourseName = string(in.String())
		case "period":
			out.Period = int(in.Int())
		case "credit":
			out.Credit = float32(in.Float32())
		case "examResults":
			out.ExamResults = float32(in.Float32())
		case "courseResults":
			out.CourseResults = string(in.String())
		case "originResults":
			out.OriginResults = float32(in.Float32())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3f28f3bEncodeUstbSsoStructs1(out *jwriter.Writer, in Grade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schoolYear\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SchoolYear))
	}
	{
		const prefix string = ",\"semester\":"
		out.RawString(prefix)
		out.Int(int(in.Semester))
	}
	{
		const prefix string = ",\"courseNo\":"
		out.RawString(prefix)
		out.String(string(in.CourseNo))
	}
	{
		const prefix string = ",\"courseName\":"
		out.RawString(prefix)
		out.String(string(in.CourseName))
	}
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix)
		out.Int(int(in.Period))
	}
	{
		const prefix string = ",\"credit\":"
		out.RawString(prefix)
		out.Float32(float32(in.Credit))
	}
	{
		const prefix string = ",\"examResults\":"
		out.RawString(prefix)
		out.Float32(float32(in.ExamResults))
	}
	{
		const prefix string = ",\"courseResults\":"
		out.RawString(prefix)
		out.String(string(in.CourseResults))
	}
	{
		const prefix string = ",\"originResults\":"
		out.RawString(prefix)
		out.Float32(float32(in.OriginResults))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Grade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3f28f3bEncodeUstbSsoStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Grade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3f28f3bEncodeUstbSsoStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Grade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3f28f3bDecodeUstbSsoStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Grade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3f28f3bDecodeUstbSsoStructs1(l, v)
}
